#include "vres/shader/lib/SurfaceData.glh"

vec3 CalcDiffuse(
  vec3 normal, vec3 lightDir, vec3 diffuseColor, vec3 diffuseSample)
{
  float diffuseFactor = max(dot(lightDir, normal), 0.0);
  return diffuseFactor * diffuseColor * diffuseSample;
}

vec3 BlinnSpecular(
  vec3 normal,
  vec3 lightDir,
  vec3 viewDir,
  vec3 lightColor,
  vec3 sample,
  float exponent)
{
  vec3 halfway = normalize(lightDir + viewDir);
  float factor = max(dot(normal, halfway), 0.0);
  factor = pow(factor, exponent);
  return factor * lightColor * sample;
}

vec3 CalcSpecular(
  vec3 normal,
  vec3 lightDir,
  vec3 viewDir,
  vec3 lightColor,
  vec3 sample,
  float exponent)
{
  vec3 reflectDir = reflect(-lightDir, normal);
  float factor = max(dot(viewDir, reflectDir), 0.0);
  factor = pow(factor, exponent);
  return factor * lightColor * sample;
}

float CalcAttenuation(float dist, float constant, float linear, float quadratic)
{
  float linearTerm = linear * dist;
  float quadraticTerm = quadratic * dist * dist;
  return 1.0 / (constant + linearTerm + quadraticTerm);
}